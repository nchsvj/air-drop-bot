import logging
import json
import os
import random
from typing import Dict, Any, Optional
from datetime import datetime, time, timedelta
import schedule
import threading
import time as time_module

import psycopg2
from telebot import TeleBot, types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(os.getenv("TELEGRAM_TOKEN"))


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    try:
        conn = psycopg2.connect(
            dbname=os.getenv("DB_NAME", "postgres"),
            user=os.getenv("DB_USER", "postgres"),
            password=os.getenv("DB_PASSWORD", "kali1122"),
            host=os.getenv("DB_HOST", "localhost"),
            port=os.getenv("DB_PORT", "5432"),
        )
        return conn
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


conn = get_db_connection()
cur = conn.cursor()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è airdrop
        cur.execute("""
            CREATE TABLE IF NOT EXISTS airdrop_schedule (
                id SERIAL PRIMARY KEY,
                scheduled_time TIME NOT NULL
            );
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è airdrop, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cur.execute("""
            INSERT INTO airdrop_schedule (scheduled_time) 
            VALUES ('10:00:00'), ('15:00:00'), ('20:00:00')
            ON CONFLICT DO NOTHING;
        """)
        conn.commit()
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        conn.rollback()


init_db()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
def load_tasks():
    try:
        with open("task_data.json", "r", encoding="utf-8") as f:
            tasks = json.load(f)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            for level in ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"]:
                if level not in tasks:
                    tasks[level] = []
                for task in tasks[level]:
                    if "question" not in task or "answer" not in task:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ —É—Ä–æ–≤–Ω–µ {level}")

            return tasks
    except FileNotFoundError:
        logger.error("–§–∞–π–ª task_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"–ª–µ–≥–∫–∏–π": [], "—Å—Ä–µ–¥–Ω–∏–π": [], "—Å–ª–æ–∂–Ω—ã–π": []}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ task_data.json")
        return {"–ª–µ–≥–∫–∏–π": [], "—Å—Ä–µ–¥–Ω–∏–π": [], "—Å–ª–æ–∂–Ω—ã–π": []}


TASKS = load_tasks()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, Dict[str, Any]] = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–ë–∞–ª–∞–Ω—Å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–º–æ—â—å")
    markup.row("Claim Airdrop")
    return markup


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    user = message.from_user
    try:
        cur.execute("SELECT * FROM users WHERE user_id = %s;", (user.id,))
        if cur.fetchone() is None:
            cur.execute(
                """INSERT INTO users 
                (user_id, username, first_name, last_name, balance) 
                VALUES (%s, %s, %s, %s, %s);""",
                (user.id, user.username, user.first_name, user.last_name, 0),
            )
            conn.commit()
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. "
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ airdrop —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /claim —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                reply_markup=create_main_keyboard(),
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!",
                reply_markup=create_main_keyboard(),
            )
        user_states[user.id] = {"state": "MAIN_MENU"}
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö–æ–º–∞–Ω–¥–∞ /claim –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è airdrop
@bot.message_handler(commands=['claim'])
@bot.message_handler(func=lambda message: message.text.lower() == "claim airdrop")
def claim_airdrop(message: types.Message):
    user_id = message.from_user.id
    try:
        cur.execute("""
            SELECT pending_airdrop_level, pending_airdrop_question 
            FROM users 
            WHERE user_id = %s;
        """, (user_id,))
        result = cur.fetchone()

        if not result or not result[0]:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö airdrop. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=create_main_keyboard()
            )
            return

        level, question_text = result
        tasks = TASKS.get(level, [])
        task = None

        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
        for t in tasks:
            if t["question"] == question_text:
                task = t
                break

        if not task:
            bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ airdrop.",
                reply_markup=create_main_keyboard()
            )
            return

        user_states[user_id] = {
            "state": "AWAITING_AIRDROP_ANSWER",
            "level": level,
            "current_task": task,
            "attempts": 0
        }

        # –û—á–∏—â–∞–µ–º pending airdrop
        cur.execute("""
            UPDATE users 
            SET pending_airdrop_level = NULL, 
                pending_airdrop_question = NULL 
            WHERE user_id = %s;
        """, (user_id,))
        conn.commit()

        bot.send_message(
            message.chat.id,
            f"üéÅ Airdrop –≤–æ–ø—Ä–æ—Å ({level} —É—Ä–æ–≤–µ–Ω—å):\n{task['question']}",
            reply_markup=types.ForceReply(selective=False)
        )

    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=create_main_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ airdrop –≤–æ–ø—Ä–æ—Å
def process_airdrop_answer(message: types.Message, user_state: Dict[str, Any]):
    user_id = message.from_user.id
    current_task = user_state["current_task"]
    user_answer = message.text.strip().lower()
    correct_answer = current_task["answer"].lower()
    level = user_state["level"]
    reward = current_task.get("reward", 1)

    try:
        if user_answer == correct_answer:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                UPDATE users 
                SET balance = balance + %s,
                    correct_answers = correct_answers + 1,
                    total_questions = total_questions + 1
                WHERE user_id = %s;
            """, (reward, user_id))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            cur.execute("""
                INSERT INTO user_answers 
                (user_id, question, answer, is_correct, level)
                VALUES (%s, %s, %s, %s, %s);
            """, (user_id, current_task["question"], user_answer, True, level))

            conn.commit()

            bot.send_message(
                message.chat.id,
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –±–∞–ª–ª–æ–≤ –∑–∞ airdrop.",
                reply_markup=create_main_keyboard()
            )
        else:
            user_state["attempts"] += 1

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            cur.execute("""
                INSERT INTO user_answers 
                (user_id, question, answer, is_correct, level)
                VALUES (%s, %s, %s, %s, %s);
            """, (user_id, current_task["question"], user_answer, False, level))

            cur.execute("""
                UPDATE users SET total_questions = total_questions + 1
                WHERE user_id = %s;
            """, (user_id,))

            conn.commit()

            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π airdrop –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard()
            )

        user_states[user_id] = {"state": "MAIN_MENU"}
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        conn.rollback()
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=create_main_keyboard()
        )
        user_states[user_id] = {"state": "MAIN_MENU"}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if message.text == "–ë–∞–ª–∞–Ω—Å":
        show_balance(message)
        return

    if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_stats(message)
        return

    if message.text == "–ü–æ–º–æ—â—å":
        show_help(message)
        return

    if user_state.get("state") == "AWAITING_AIRDROP_ANSWER":
        process_airdrop_answer(message, user_state)
    else:
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=create_main_keyboard()
        )


def show_balance(message: types.Message):
    user_id = message.from_user.id
    try:
        cur.execute("""
            SELECT balance, correct_answers, total_questions 
            FROM users WHERE user_id = %s;
        """, (user_id,))
        result = cur.fetchone()

        if result:
            balance, correct, total = result
            accuracy = (correct / total * 100) if total > 0 else 0

            bot.send_message(
                message.chat.id,
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
                f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%",
                reply_markup=create_main_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start",
                reply_markup=create_main_keyboard()
            )
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.",
            reply_markup=create_main_keyboard()
        )


def show_stats(message: types.Message):
    user_id = message.from_user.id
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cur.execute("""
            SELECT 
                COUNT(*) as total_answers,
                SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) as correct_answers,
                level
            FROM user_answers
            WHERE user_id = %s
            GROUP BY level;
        """, (user_id,))

        stats = cur.fetchall()

        if not stats:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤!",
                reply_markup=create_main_keyboard()
            )
            return

        message_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for row in stats:
            total, correct, level = row
            accuracy = (correct / total * 100) if total > 0 else 0
            message_text += (
                f"üèÜ {level.capitalize()} —É—Ä–æ–≤–µ–Ω—å:\n"
                f"‚úÖ {correct} –∏–∑ {total}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%\n\n"
            )

        bot.send_message(
            message.chat.id,
            message_text,
            reply_markup=create_main_keyboard()
        )
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=create_main_keyboard()
        )


def show_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –ë–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
    )

    bot.send_message(
        message.chat.id,
        help_text,
        reply_markup=create_main_keyboard()
    )

# –°–∏—Å—Ç–µ–º–∞ airdrop
def send_airdrop_to_users():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT user_id FROM users;")
        users = cur.fetchall()

        if not users:
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        level = random.choice(["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"])
        tasks = TASKS.get(level, [])

        if not tasks:
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
        task = random.choice(tasks)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º airdrop –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user in users:
            user_id = user[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π airdrop
            cur.execute("""
                SELECT last_airdrop FROM users WHERE user_id = %s;
            """, (user_id,))
            last_airdrop = cur.fetchone()[0]

            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª airdrop, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if last_airdrop and last_airdrop.date() == datetime.now().date():
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º airdrop –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                UPDATE users 
                SET pending_airdrop_level = %s,
                    pending_airdrop_question = %s,
                    last_airdrop = CURRENT_TIMESTAMP
                WHERE user_id = %s;
            """, (level, task["question"], user_id))

            try:
                bot.send_message(
                    user_id,
                    f"üéâ –í–∞–º –ø—Ä–∏—à–µ–ª airdrop ({level} —É—Ä–æ–≤–µ–Ω—å)! "
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /claim —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        conn.commit()
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ airdrop: {e}")
        conn.rollback()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ airdrop: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è airdrop
def schedule_airdrop_jobs():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ airdrop –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur.execute("SELECT scheduled_time FROM airdrop_schedule;")
        times = cur.fetchall()

        for t in times:
            scheduled_time = t[0]
            schedule.every().day.at(str(scheduled_time)).do(send_airdrop_to_users)
            logger.info(f"Airdrop –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ airdrop: {e}")


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    schedule_airdrop_jobs()
    while True:
        schedule.run_pending()
        time_module.sleep(60)


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ airdrop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=run_scheduler)
        scheduler_thread.daemon = True
        scheduler_thread.start()

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        cur.close()
        conn.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")